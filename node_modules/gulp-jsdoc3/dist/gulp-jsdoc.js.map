{"version":3,"sources":["gulp-jsdoc.js"],"names":[],"mappings":"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","file":"gulp-jsdoc.js","sourcesContent":["import map from 'map-stream';\nimport tmp from 'tmp';\nimport fs from 'fs';\nimport path from 'path';\nimport gutil from 'gulp-util';\nimport Promise from 'bluebird';\nlet os = require('os').type();\n\nlet debug = require('debug')('gulp-jsdoc3');\n\n/**\n * @callback gulpDoneCallback\n */\n\n/**\n * A wrapper around jsdoc cli.\n *\n * This function collects all filenames. Then runs:\n * ```jsdoc -c config -t node_modules/ink-docstrap/template gulpFile1 gulpFile2```\n * @example\n * gulp.src(['README.md', 'src/*.js']), {read: false}).pipe(\n *     jsdoc(options, cb)\n * );\n *\n * @param {Object} [config=require('./jsdocConfig.json')]\n * @param {gulpDoneCallback} done\n * @returns {*|SignalBinding}\n */\nexport function jsdoc(config, done) {\n    let files = [];\n    let jsdocConfig;    \n\n    // User just passed callback\n    if(arguments.length === 1 && typeof done !== 'function'){\n        done = config;\n        config = undefined;\n    }\n\n    // Prevent some errors\n    if (typeof done !== 'function') {\n        done = function () {\n        };\n    }\n\n    jsdocConfig = config || require('./jsdocConfig.json');\n\n    debug('Config:\\n' + JSON.stringify(jsdocConfig, undefined, 2));\n\n    return map(function (file, callback) {\n        files.push(file.path);\n        callback(null, file);\n    }).on('end', function () {\n        // We use a promise to prevent multiple dones (normal cause error then close)\n        new Promise(function (resolve, reject) {\n            if (files.length === 0) {\n                const errMsg = 'JSDoc Error: no files found to process';\n                gutil.log(gutil.colors.red(errMsg));\n                gutil.beep();\n                reject(new Error(errMsg));\n            }\n\n            const tmpobj = tmp.fileSync();\n            debug('Documenting files: ' + files.join(' '));\n            fs.writeFile(tmpobj.name, JSON.stringify(jsdocConfig), 'utf8', function (err) {\n                // We couldn't write the temp file\n                if (err) {\n                    reject(err);\n                }\n\n                const spawn = require('child_process').spawn,\n                    cmd = require.resolve('jsdoc/jsdoc.js'), // Needed to handle npm3 - find the binary anywhere\n                    inkdocstrap = path.dirname(require.resolve('ink-docstrap'));\n                \n                let args = ['-c', tmpobj.name];\n                \n                // Config + ink-docstrap if user did not specify their own layout\n                if(!jsdocConfig.templates || \n                    !jsdocConfig.templates.default || \n                    !jsdocConfig.templates.default.layoutFile){\n                    args = args.concat(['-t', inkdocstrap]);\n                }    \n\n                args = args.concat(files);\n\n                debug(cmd + ' ' + args.join(' '));\n\n                const child = os === 'Windows_NT'\n                    ? spawn(process.execPath, [cmd].concat(args), {cwd: process.cwd()})\n                    : spawn(cmd, args, {cwd: process.cwd()}); // unix\n                child.stdout.setEncoding('utf8');\n                child.stderr.setEncoding('utf8');\n                child.stdout.on('data', function (data) {\n                    gutil.log(data);\n                });\n                child.stderr.on('data', function (data) {\n                    gutil.log(gutil.colors.red(data));\n                    gutil.beep();\n                });\n                child.on('close', function (code) {\n                    if (code === 0) {\n                        gutil.log('Documented ' + files.length + ' files!');\n                        resolve();\n                    } else {\n                        gutil.log(gutil.colors.red('JSDoc returned with error code: ' + code));\n                        gutil.beep();\n                        reject(new Error('JSDoc closed with error code: ' + code));\n                    }\n                });\n                child.on('error', function (error) {\n                    gutil.log(gutil.colors.red('JSDoc Error: ' + error));\n                    gutil.beep();\n                    reject(new Error(error));\n                });\n            });\n        }).asCallback(done);\n    });\n}\n"],"sourceRoot":"/source/"}